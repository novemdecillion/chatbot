/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables


import io.github.novemdecillion.adapter.jooq.DefaultSchema
import io.github.novemdecillion.adapter.jooq.keys.LOGS_PKEY
import io.github.novemdecillion.adapter.jooq.tables.records.LogsRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class LogsTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LogsRecord>?,
    aliased: Table<LogsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<LogsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>logs</code>
         */
        val LOGS = LogsTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LogsRecord> = LogsRecord::class.java

    /**
     * The column <code>logs.id</code>.
     */
    val ID: TableField<LogsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>logs.session_id</code>.
     */
    val SESSION_ID: TableField<LogsRecord, String?> = createField(DSL.name("session_id"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>logs.kind</code>.
     */
    val KIND: TableField<LogsRecord, String?> = createField(DSL.name("kind"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>logs.ip_address</code>.
     */
    val IP_ADDRESS: TableField<LogsRecord, String?> = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>logs.input</code>.
     */
    val INPUT: TableField<LogsRecord, String?> = createField(DSL.name("input"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>logs.output</code>.
     */
    val OUTPUT: TableField<LogsRecord, String?> = createField(DSL.name("output"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>logs.error</code>.
     */
    val ERROR: TableField<LogsRecord, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>logs.created_at</code>.
     */
    val CREATED_AT: TableField<LogsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<LogsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<LogsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>logs</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>logs</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>logs</code> table reference
     */
    constructor(): this(DSL.name("logs"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, LogsRecord>): this(Internal.createPathAlias(child, key), child, key, LOGS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<LogsRecord, Int?> = super.getIdentity() as Identity<LogsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<LogsRecord> = LOGS_PKEY
    override fun getKeys(): List<UniqueKey<LogsRecord>> = listOf(LOGS_PKEY)
    override fun `as`(alias: String): LogsTable = LogsTable(DSL.name(alias), this)
    override fun `as`(alias: Name): LogsTable = LogsTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LogsTable = LogsTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LogsTable = LogsTable(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, String?, String?, String?, String?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, String?, String?, String?, String?, String?, String?, LocalDateTime?>
}
