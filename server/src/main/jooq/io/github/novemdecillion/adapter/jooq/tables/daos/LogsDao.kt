/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.LogsTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.LogsEntity
import io.github.novemdecillion.adapter.jooq.tables.records.LogsRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class LogsDao(configuration: Configuration?) : DAOImpl<LogsRecord, LogsEntity, Int>(LogsTable.LOGS, LogsEntity::class.java, configuration) {

    /**
     * Create a new LogsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: LogsEntity): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfIdTable(lowerInclusive: Int?, upperInclusive: Int?): List<LogsEntity> = fetchRange(LogsTable.LOGS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchByIdTable(vararg values: Int): List<LogsEntity> = fetch(LogsTable.LOGS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneByIdTable(value: Int): LogsEntity? = fetchOne(LogsTable.LOGS.ID, value)

    /**
     * Fetch records that have <code>session_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSessionIdTable(lowerInclusive: String?, upperInclusive: String?): List<LogsEntity> = fetchRange(LogsTable.LOGS.SESSION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>session_id IN (values)</code>
     */
    fun fetchBySessionIdTable(vararg values: String): List<LogsEntity> = fetch(LogsTable.LOGS.SESSION_ID, *values)

    /**
     * Fetch records that have <code>kind BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfKindTable(lowerInclusive: String?, upperInclusive: String?): List<LogsEntity> = fetchRange(LogsTable.LOGS.KIND, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>kind IN (values)</code>
     */
    fun fetchByKindTable(vararg values: String): List<LogsEntity> = fetch(LogsTable.LOGS.KIND, *values)

    /**
     * Fetch records that have <code>ip_address BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfIpAddressTable(lowerInclusive: String?, upperInclusive: String?): List<LogsEntity> = fetchRange(LogsTable.LOGS.IP_ADDRESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>ip_address IN (values)</code>
     */
    fun fetchByIpAddressTable(vararg values: String): List<LogsEntity> = fetch(LogsTable.LOGS.IP_ADDRESS, *values)

    /**
     * Fetch records that have <code>input BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInputTable(lowerInclusive: String?, upperInclusive: String?): List<LogsEntity> = fetchRange(LogsTable.LOGS.INPUT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>input IN (values)</code>
     */
    fun fetchByInputTable(vararg values: String): List<LogsEntity> = fetch(LogsTable.LOGS.INPUT, *values)

    /**
     * Fetch records that have <code>output BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfOutputTable(lowerInclusive: String?, upperInclusive: String?): List<LogsEntity> = fetchRange(LogsTable.LOGS.OUTPUT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>output IN (values)</code>
     */
    fun fetchByOutputTable(vararg values: String): List<LogsEntity> = fetch(LogsTable.LOGS.OUTPUT, *values)

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfErrorTable(lowerInclusive: String?, upperInclusive: String?): List<LogsEntity> = fetchRange(LogsTable.LOGS.ERROR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    fun fetchByErrorTable(vararg values: String): List<LogsEntity> = fetch(LogsTable.LOGS.ERROR, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCreatedAtTable(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<LogsEntity> = fetchRange(LogsTable.LOGS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAtTable(vararg values: LocalDateTime): List<LogsEntity> = fetch(LogsTable.LOGS.CREATED_AT, *values)
}
