/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.FlywaySchemaHistoryTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.FlywaySchemaHistoryEntity
import io.github.novemdecillion.adapter.jooq.tables.records.FlywaySchemaHistoryRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FlywaySchemaHistoryDao(configuration: Configuration?) : DAOImpl<FlywaySchemaHistoryRecord, FlywaySchemaHistoryEntity, Int>(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY, FlywaySchemaHistoryEntity::class.java, configuration) {

    /**
     * Create a new FlywaySchemaHistoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: FlywaySchemaHistoryEntity): Int? = o.installedRank

    /**
     * Fetch records that have <code>installed_rank BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInstalledRankTable(lowerInclusive: Int?, upperInclusive: Int?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>installed_rank IN (values)</code>
     */
    fun fetchByInstalledRankTable(vararg values: Int): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>installed_rank = value</code>
     */
    fun fetchOneByInstalledRankTable(value: Int): FlywaySchemaHistoryEntity? = fetchOne(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK, value)

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfVersionTable(lowerInclusive: String?, upperInclusive: String?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.VERSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    fun fetchByVersionTable(vararg values: String): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.VERSION, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfDescriptionTable(lowerInclusive: String?, upperInclusive: String?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescriptionTable(vararg values: String): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTypeTable(lowerInclusive: String?, upperInclusive: String?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    fun fetchByTypeTable(vararg values: String): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.TYPE, *values)

    /**
     * Fetch records that have <code>script BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfScriptTable(lowerInclusive: String?, upperInclusive: String?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.SCRIPT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>script IN (values)</code>
     */
    fun fetchByScriptTable(vararg values: String): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.SCRIPT, *values)

    /**
     * Fetch records that have <code>checksum BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfChecksumTable(lowerInclusive: Int?, upperInclusive: Int?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.CHECKSUM, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>checksum IN (values)</code>
     */
    fun fetchByChecksumTable(vararg values: Int): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.CHECKSUM, *values.toTypedArray())

    /**
     * Fetch records that have <code>installed_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInstalledByTable(lowerInclusive: String?, upperInclusive: String?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>installed_by IN (values)</code>
     */
    fun fetchByInstalledByTable(vararg values: String): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_BY, *values)

    /**
     * Fetch records that have <code>installed_on BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInstalledOnTable(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_ON, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>installed_on IN (values)</code>
     */
    fun fetchByInstalledOnTable(vararg values: LocalDateTime): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.INSTALLED_ON, *values)

    /**
     * Fetch records that have <code>execution_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfExecutionTimeTable(lowerInclusive: Int?, upperInclusive: Int?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.EXECUTION_TIME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>execution_time IN (values)</code>
     */
    fun fetchByExecutionTimeTable(vararg values: Int): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.EXECUTION_TIME, *values.toTypedArray())

    /**
     * Fetch records that have <code>success BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSuccessTable(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<FlywaySchemaHistoryEntity> = fetchRange(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.SUCCESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>success IN (values)</code>
     */
    fun fetchBySuccessTable(vararg values: Boolean): List<FlywaySchemaHistoryEntity> = fetch(FlywaySchemaHistoryTable.FLYWAY_SCHEMA_HISTORY.SUCCESS, *values.toTypedArray())
}
